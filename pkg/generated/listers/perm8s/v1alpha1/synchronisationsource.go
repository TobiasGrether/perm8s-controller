/*
Copyright 2024 Tobias Grether

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "perm8s/pkg/apis/perm8s/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SynchronisationSourceLister helps list SynchronisationSources.
// All objects returned here must be treated as read-only.
type SynchronisationSourceLister interface {
	// List lists all SynchronisationSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SynchronisationSource, err error)
	// SynchronisationSources returns an object that can list and get SynchronisationSources.
	SynchronisationSources(namespace string) SynchronisationSourceNamespaceLister
	SynchronisationSourceListerExpansion
}

// synchronisationSourceLister implements the SynchronisationSourceLister interface.
type synchronisationSourceLister struct {
	indexer cache.Indexer
}

// NewSynchronisationSourceLister returns a new SynchronisationSourceLister.
func NewSynchronisationSourceLister(indexer cache.Indexer) SynchronisationSourceLister {
	return &synchronisationSourceLister{indexer: indexer}
}

// List lists all SynchronisationSources in the indexer.
func (s *synchronisationSourceLister) List(selector labels.Selector) (ret []*v1alpha1.SynchronisationSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SynchronisationSource))
	})
	return ret, err
}

// SynchronisationSources returns an object that can list and get SynchronisationSources.
func (s *synchronisationSourceLister) SynchronisationSources(namespace string) SynchronisationSourceNamespaceLister {
	return synchronisationSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SynchronisationSourceNamespaceLister helps list and get SynchronisationSources.
// All objects returned here must be treated as read-only.
type SynchronisationSourceNamespaceLister interface {
	// List lists all SynchronisationSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SynchronisationSource, err error)
	// Get retrieves the SynchronisationSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SynchronisationSource, error)
	SynchronisationSourceNamespaceListerExpansion
}

// synchronisationSourceNamespaceLister implements the SynchronisationSourceNamespaceLister
// interface.
type synchronisationSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SynchronisationSources in the indexer for a given namespace.
func (s synchronisationSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SynchronisationSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SynchronisationSource))
	})
	return ret, err
}

// Get retrieves the SynchronisationSource from the indexer for a given namespace and name.
func (s synchronisationSourceNamespaceLister) Get(name string) (*v1alpha1.SynchronisationSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("synchronisationsource"), name)
	}
	return obj.(*v1alpha1.SynchronisationSource), nil
}
